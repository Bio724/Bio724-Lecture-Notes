* Awk

  
Awk (~awk~) is a programming language designed for processing structured text files. You can use it to write short one liners or to write full blown programs.  We'll use Awk to illustrate how you might transitions from simple command line usage into slightly more complicated scripts.

One simple thing we can do with Awk is to use it to re-order fields in a structured data file:

#+begin_src bash
awk '{print $2, $1, $3}' columns.txt
#+end_src

In the command above the the dollar signs followed by numbers refer to the fields of the file. With it's default setting ~awk~ operates line by line, so you can interpret the above statement as saying:

#+begin_quote
"for each line, print the fields 2, 1, and 3".
#+end_quote


** Awk delimiters

By default, Awk recognizes any white space as a delimiter between columns. If we want to be specific about the character used as a delimiter, we can set the `-F` or `--field-separator` option. For example to use tabs as the delimiter we could do:

#+begin_src bash
awk -F'\t' '{print $2, $1, $3}' columns.txt
#+end_src

** ~pattern {action}~ syntax

The basic syntax of ~awk~ is often depicted in the form ~pattern {action}~. The above command only specified an action, so it was applied to every line.  By contrast, in the example below we specify a pattern.  The pattern can be read as -- "if the 3rd field is 'chromosome'". For all lines that match that pattern the correspoding action is applied; in this case "print fields 1 and 5" (the chromosome name and its length):

#+begin_src bash
awk '$3=="region" {print $1, $5}' yeast.gff 
#+end_src


Here's another ~pattern {action}~ pair that shows how we could find all gene features with length less than 300 and count them:


#+begin_src bash
awk '$3 == "gene" && ($5 - $4 + 1) < 300 {print $0 }' yeast.gff | wc -l
#+end_src


~&&~ is the AND operator. Read this as "if the 3rd fields is 'gene' AND the the 5th field minus the 4th field is less than 300."

In this last example we add one more condition -- we looked for the string "gene_biotype=tRNA" in the attribute (9th) field. The results indicate that a significant proportion of these small genes code for transfer RNAs (tRNA; https://www.genome.gov/genetics-glossary/Transfer-RNA)


#+begin_src 
awk '$3 == "gene" && ($5 - $4 + 1) < 300 && match($9, "gene_biotype=tRNA") {print $0 }' yeast.gff | wc -l
#+end_src

